هذا الكود يمثل جزءًا من نظام لتسجيل الدخول وإنشاء حسابات جديدة في تطبيق يعتمد على Node.js مع استخدام مكتبات مثل `bcrypt` و`jsonwebtoken`. سأشرح الكود بشكل تفصيلي:

### 1. استيراد المكتبات والموديلات

```typescript
import { userModel } from "../models/userModel"
import bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
```

- **`userModel`**: يستورد النموذج الخاص بالمستخدمين (من ملف خارجي). يتم استخدامه للتفاعل مع قاعدة البيانات (ربما MongoDB).
- **`bcrypt`**: مكتبة تستخدم لتجزئة (تشفير) كلمات المرور. يوفر أمانًا جيدًا من خلال استخدام تقنية "salt" لتأمين كلمات المرور.
- **`jsonwebtoken`**: مكتبة تُستخدم لإنشاء وتوقيع JWT (JSON Web Tokens)، وهي تقنية تُستخدم لإصدار رموز معتمدة للتحقق من هوية المستخدمين.

### 2. تعريف واجهة (Interface) لمعاملات التسجيل

```typescript
interface RegisterParams {
    firstName: string
    lastName: string
    email: string
    pass: string
}
```

- يتم هنا تعريف شكل البيانات التي يجب تمريرها لدالة التسجيل (`register`). وهي تضم الحقول التالية:
  - **firstName**: الاسم الأول.
  - **lastName**: الاسم الأخير.
  - **email**: البريد الإلكتروني.
  - **pass**: كلمة المرور.

### 3. دالة التسجيل `register`

```typescript
export const register = async ({ firstName, lastName, email, pass }: RegisterParams) => {
    const findUser = await userModel.findOne({ email })
    if (findUser) {
        return { message: "User Already exists!", statusCode: 400 }
    }
    const hashPassword = await bcrypt.hash(pass, 10)
    const newUser = new userModel({ firstName, lastName, email, pass: hashPassword })
    await newUser.save()
    return { data: generateKay({ firstName, lastName, email }), statusCode: 200 };
}
```

- **البحث عن مستخدم موجود**: 
  - `userModel.findOne({ email })` يبحث عن مستخدم في قاعدة البيانات بناءً على البريد الإلكتروني. إذا وجد المستخدم، تعود الدالة برسالة "المستخدم موجود بالفعل" مع **status code 400**.
  
- **تجزئة كلمة المرور**: 
  - `bcrypt.hash(pass, 10)` تقوم بتجزئة كلمة المرور باستخدام 10 تكرارات للـ "salt". هذا يحمي كلمة المرور الأصلية من التسريب.

- **إنشاء المستخدم الجديد**:
  - يتم إنشاء مستخدم جديد باستخدام `userModel` مع الاسم الأول، الاسم الأخير، البريد الإلكتروني، وكلمة المرور المجزأة.

- **حفظ المستخدم**:
  - `newUser.save()` يحفظ المستخدم في قاعدة البيانات.

- **توليد التوكن**: 
  - `generateKay` تنشئ JWT جديد يتضمن المعلومات الأساسية للمستخدم (الاسم الأول، الاسم الأخير، البريد الإلكتروني).

### 4. واجهة بيانات تسجيل الدخول

```typescript
interface LoginParams {
    email: string
    pass: string
}
```

- واجهة تحدد شكل البيانات التي تُمرر لدالة تسجيل الدخول (`logIn`)، وهي:
  - **email**: البريد الإلكتروني.
  - **pass**: كلمة المرور.

### 5. دالة تسجيل الدخول `logIn`

```typescript
export const logIn = async ({ email, pass }: LoginParams) => {
    const findUser = await userModel.findOne({ email })
    if (!findUser) {
        return { data: "Your password or email is not correct", statusCode: 200 };
    }
    const passMatch = await bcrypt.compare(pass, findUser.pass);
    if (passMatch) {
        return { data: generateKay({ firstName: findUser.firstName, lastName: findUser.lastName, email }), statusCode: 200 };
    }
    return { data: "Your password or email is not correct", statusCode: 200 };
}
```

- **البحث عن المستخدم**:
  - `findUser` يبحث في قاعدة البيانات عن المستخدم بناءً على البريد الإلكتروني. إذا لم يتم العثور على المستخدم، تعود الدالة برسالة "البريد الإلكتروني أو كلمة المرور غير صحيحة".

- **مقارنة كلمة المرور**:
  - `bcrypt.compare(pass, findUser.pass)` يقارن كلمة المرور التي أدخلها المستخدم مع كلمة المرور المجزأة المحفوظة في قاعدة البيانات. إذا كانت المطابقة صحيحة، يتم توليد JWT باستخدام `generateKay` وتُعاد البيانات.

- **عدم المطابقة**:
  - إذا لم تتطابق كلمة المرور، يتم إرجاع نفس الرسالة "البريد الإلكتروني أو كلمة المرور غير صحيحة".

### 6. دالة توليد JWT `generateKay`

```typescript
const generateKay = (data: any) => {
    return jwt.sign(data, "ff")
}
```

- **`generateKay`**: تقوم بإنشاء توقيع JWT يتضمن البيانات الممررة (الاسم الأول، الاسم الأخير، البريد الإلكتروني).
- **`jwt.sign(data, secret)`**: يتم توقيع البيانات باستخدام مفتاح سري (في هذه الحالة السلسلة `"jFA+m)9pyn(V>y<*aWD.1EY9+{#J4e$w"`). هذا المفتاح السري يستخدم للتحقق من صحة التوكن لاحقًا.

### خلاصة:
- الكود يمثل تسجيل مستخدم جديد والتحقق من بيانات المستخدمين عند تسجيل الدخول.
- يتم استخدام `bcrypt` لتأمين كلمات المرور بتجزئتها، و`JWT` لتوليد رموز مصادقة يتم استخدامها لتتبع هوية المستخدمين.














هذا الكود يمثل جزءًا من تطبيق Node.js ويستخدم للتفاعل مع قاعدة بيانات (ربما MongoDB) من خلال `productsModel`، وهو نموذج خاص بالمنتجات. يحتوي الكود على دالتين أساسيتين:

### 1. استيراد نموذج المنتجات

```typescript
import { productsModel } from '../models/productsModel'
```

- **`productsModel`**: يستورد النموذج الخاص بالمنتجات من ملف خارجي (يُفترض أنه يمثل الـ Schema الخاصة بالمنتجات في قاعدة البيانات). يتم استخدامه للتفاعل مع قاعدة البيانات مثل إدخال، قراءة، وتحديث المنتجات.

### 2. دالة `getAllProducts`

```typescript
export const getAllProducts = async () => {
    return await productsModel.find()
}
```

- **المهمة**: هذه الدالة تستخدم لاسترجاع جميع المنتجات المخزنة في قاعدة البيانات.
- **الشرح**:
  - `productsModel.find()`: هذه الدالة تبحث في قاعدة البيانات عن جميع المنتجات المخزنة وتُرجعها.
  - **النتيجة**: تعود الدالة بنتيجة استعلام تحتوي على قائمة بالمنتجات المخزنة في قاعدة البيانات (على هيئة مصفوفة).

### 3. دالة `seedInitialProducts`

```typescript
export const seedInitialProducts = async () => {
    const products = [
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100},
        {title: "Product 1", image: "image.jpeg", price: 10, stoke: 100}
    ]
    const existProducts = await getAllProducts();
    if (existProducts.length === 0) {
        await productsModel.insertMany(products)
    }
}
```

- **المهمة**: هذه الدالة تُستخدم لإضافة مجموعة من المنتجات الافتراضية إلى قاعدة البيانات إذا كانت قاعدة البيانات فارغة (لا توجد منتجات موجودة بالفعل).

#### الخطوات:
1. **إنشاء قائمة بالمنتجات الافتراضية**:
   - `const products = [...]`: هنا يتم تعريف مصفوفة تحتوي على 10 منتجات افتراضية، كل منتج يحتوي على:
     - **`title`**: اسم المنتج (في هذه الحالة "Product 1" مكرر لكل المنتجات).
     - **`image`**: اسم الصورة الافتراضية (في هذه الحالة "image.jpeg").
     - **`price`**: سعر المنتج (في هذه الحالة 10).
     - **`stoke`**: المخزون المتاح من المنتج (100 وحدة).

2. **التحقق من وجود المنتجات في قاعدة البيانات**:
   - `const existProducts = await getAllProducts()`: هنا يتم استدعاء الدالة `getAllProducts` لاسترجاع جميع المنتجات الموجودة في قاعدة البيانات.
   - `if (existProducts.length === 0)`: إذا كانت قاعدة البيانات فارغة (عدد المنتجات يساوي 0)، سيتم تنفيذ الجزء التالي.

3. **إضافة المنتجات إلى قاعدة البيانات**:
   - `await productsModel.insertMany(products)`: إذا كانت قاعدة البيانات فارغة، سيتم إدراج المنتجات الافتراضية باستخدام دالة `insertMany`، التي تضيف مجموعة من المنتجات دفعة واحدة إلى قاعدة البيانات.

### الخلاصة:

- **`getAllProducts`**: دالة لاسترجاع جميع المنتجات من قاعدة البيانات.
- **`seedInitialProducts`**: دالة تُستخدم لتهيئة قاعدة البيانات بمجموعة من المنتجات الافتراضية إذا كانت قاعدة البيانات فارغة.






هذا الكود يمثل نموذجًا لسلة التسوق (Cart) ونماذج العناصر التي تحتويها (Cart Items) في نظام تجارة إلكترونية باستخدام **Mongoose**، وهو مكتبة تُستخدم للتعامل مع قاعدة البيانات **MongoDB** في تطبيقات **Node.js**. سأشرح الكود بالتفصيل.

### 1. استيراد المكتبات والموديلات

```typescript
import mongoose, { Schema, ObjectId, Document } from 'mongoose';
import { IProducts } from './productsModel';
```

- **mongoose**: مكتبة للتفاعل مع قاعدة بيانات MongoDB.
- **Schema**: يستخدم لتحديد هيكل البيانات التي سيتم تخزينها في قاعدة البيانات.
- **ObjectId**: نوع معرف فريد يستخدمه MongoDB لكل سجل.
- **Document**: يمثل وثيقة في MongoDB وهيكل البيانات المخزنة.
- **IProducts**: استيراد واجهة (Interface) المنتج من ملف `productsModel` الذي يمثل هيكل بيانات المنتجات.

### 2. تحديد حالة السلة (Cart Status)

```typescript
const cartStatusEnum = ["Active", "Complete"];
```

- **cartStatusEnum**: مصفوفة تحتوي على القيم الممكنة لحالة سلة التسوق.
  - **"Active"**: تعني أن السلة لا تزال قيد الاستخدام، وربما يمكن إضافة المزيد من العناصر إليها.
  - **"Complete"**: تعني أن السلة مكتملة، وعملية الشراء قد انتهت.

### 3. تعريف واجهة (Interface) لعناصر السلة `ICartItems`

```typescript
export interface ICartItems extends Document {
    product: IProducts;
    unitPrice: number;
    quantity: number;
}
```

- **ICartItems**: تمثل واجهة لعناصر السلة، والتي تحتوي على:
  - **product**: يمثل المنتج المضاف للسلة، وهو من النوع `IProducts`، الذي تم استيراده من موديل المنتجات.
  - **unitPrice**: سعر الوحدة من المنتج.
  - **quantity**: كمية المنتج التي أضافها المستخدم إلى السلة.

### 4. تعريف واجهة (Interface) للسلة `ICart`

```typescript
export interface ICart extends Document {
    userId: ObjectId | string;
    items: ICartItems[];
    totalAmount: number;
    status: "Active" | "Complete";
}
```

- **ICart**: تمثل واجهة لسلة التسوق وتحتوي على:
  - **userId**: معرف المستخدم (من النوع `ObjectId` أو `string`) الذي يملك هذه السلة.
  - **items**: مصفوفة تحتوي على العناصر المضافة إلى السلة (من النوع `ICartItems`).
  - **totalAmount**: المبلغ الإجمالي للسلة، والذي يتم حسابه بناءً على مجموع أسعار الوحدات وكميات العناصر.
  - **status**: حالة السلة، وهي إما `"Active"` أو `"Complete"`.

### 5. تعريف مخطط بيانات عناصر السلة `cartItemSchema`

```typescript
const cartItemSchema = new Schema<ICartItems>({
    product: { type: Schema.Types.ObjectId, ref: "Products", required: true },
    unitPrice: { type: Number, required: true, default: 1 },
    quantity: { type: Number, required: true }
});
```

- **cartItemSchema**: مخطط (Schema) بيانات عنصر السلة، وهو يحدد الحقول التي سيتم تخزينها في قاعدة البيانات:
  - **product**: معرف المنتج المضاف إلى السلة (من النوع `ObjectId`)، ويتم ربطه بمنتج موجود في مجموعة "Products" في قاعدة البيانات.
  - **unitPrice**: سعر الوحدة للمنتج، وهو من النوع `Number` وحقله مطلوب.
  - **quantity**: الكمية المضافة من المنتج، وهو أيضًا من النوع `Number` ومطلوب.

### 6. تعريف مخطط بيانات السلة `cartSchema`

```typescript
const cartSchema = new Schema<ICart>({
    userId: { type: Schema.Types.ObjectId, ref: "User", required: true },
    items: [cartItemSchema],
    totalAmount: { type: Number, required: true },
    status: { type: String, enum: cartStatusEnum, default: "Active" }
});
```

- **cartSchema**: مخطط (Schema) بيانات السلة، ويحدد الحقول التالية:
  - **userId**: معرف المستخدم (من النوع `ObjectId`) ويجب أن يكون مرجعًا لمجموعة المستخدمين "User" في قاعدة البيانات.
  - **items**: مصفوفة تحتوي على عناصر السلة (من النوع `cartItemSchema`).
  - **totalAmount**: المبلغ الإجمالي للسلة (من النوع `Number`).
  - **status**: حالة السلة، إما `"Active"` أو `"Complete"`. القيمة الافتراضية هي `"Active"`.

### 7. إنشاء نموذج السلة `cartModel`

```typescript
export const cartModel = mongoose.model<ICart>("Cart", cartSchema);
```

- **cartModel**: هنا يتم إنشاء نموذج (Model) باستخدام المخطط `cartSchema` تحت اسم `"Cart"`. النموذج يمثل السلة الكاملة ويتيح لنا تنفيذ عمليات مثل الإضافة والتحديث والحذف والاستعلام في قاعدة البيانات على مجموعة `Cart`.

### خلاصة:

- **`ICartItems`**: واجهة تمثل عناصر السلة، تحتوي على المنتج وسعر الوحدة والكمية.
- **`ICart`**: واجهة تمثل السلة ككل، تحتوي على معرف المستخدم، العناصر، المبلغ الإجمالي، والحالة.
- **`cartItemSchema`**: مخطط يمثل عناصر السلة التي تحتوي على معرف المنتج، سعر الوحدة، والكمية.
- **`cartSchema`**: مخطط يمثل السلة نفسها، ويحتوي على معرف المستخدم، العناصر، المبلغ الإجمالي، والحالة.
- **`cartModel`**: النموذج الذي يسمح بالتفاعل مع مجموعة السلات في قاعدة البيانات، حيث يمكن تخزين السلات الجديدة أو استرجاع السلات الموجودة.
